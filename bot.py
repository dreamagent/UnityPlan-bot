import asyncio, os, logging
from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
import aiosqlite

# === OpenAI ===
from openai import OpenAI

logging.basicConfig(level=logging.INFO)
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

assert BOT_TOKEN, "‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env"
assert OPENAI_API_KEY, "‚ùå OPENAI_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

client = OpenAI(api_key=OPENAI_API_KEY)  # —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è SDK

DB_PATH = "data.db"

# ---------- –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö (—Ü—ñ–ª—ñ) ----------
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS goals (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                text TEXT NOT NULL,
                is_done INTEGER NOT NULL DEFAULT 0,
                created_at TEXT NOT NULL
            )
            """
        )
        await db.commit()

async def add_goal(user_id: int, text: str) -> int:
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "INSERT INTO goals(user_id, text, is_done, created_at) VALUES (?, ?, 0, ?)",
            (user_id, text, datetime.utcnow().isoformat()),
        )
        await db.commit()
        return cur.lastrowid

async def list_goals(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "SELECT id, text, is_done FROM goals WHERE user_id=? ORDER BY id DESC",
            (user_id,),
        )
        return await cur.fetchall()

async def mark_done(user_id: int, goal_id: int) -> int:
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "UPDATE goals SET is_done=1 WHERE id=? AND user_id=?",
            (goal_id, user_id),
        )
        await db.commit()
        return cur.rowcount

async def delete_goal(user_id: int, goal_id: int) -> int:
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "DELETE FROM goals WHERE id=? AND user_id=?",
            (goal_id, user_id),
        )
        await db.commit()
        return cur.rowcount

# ---------- –ö–Ω–æ–ø–∫–∏ ----------
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üß† –ó–∞–ø–∏—Ç–∞—Ç–∏ AI"), KeyboardButton(text="üéØ –ú–æ—ó —Ü—ñ–ª—ñ")],
        [KeyboardButton(text="üöÄ –ù–æ–≤–∏–π —á–µ–ª–µ–Ω–¥–∂"), KeyboardButton(text="üìÖ –ü–ª–∞–Ω –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ")],
    ],
    resize_keyboard=True
)

# ---------- –î–æ–ø–æ–º—ñ–∂–Ω–µ: –≤–∏–∫–ª–∏–∫ OpenAI ----------
async def ask_openai(prompt: str) -> str:
    """
    –ü–∏—Ç–∞—î–º–æ OpenAI —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–æ—Ç–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.
    """
    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",  # —à–≤–∏–¥–∫–æ/–¥–µ—à–µ–≤–æ; –º–æ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –ø–æ—Ç—É–∂–Ω—ñ—à—É
            messages=[
                {"role": "system", "content": "You are GPT-5 Thinking, a helpful planning assistant for productivity, goals and daily focus. Answer concisely in Ukrainian unless asked otherwise."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3,
            max_tokens=600,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        logging.exception("OpenAI error")
        return "‚ö†Ô∏è –í–∏–±–∞—á, –∑–∞—Ä–∞–∑ –Ω–µ –≤–¥–∞—î—Ç—å—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI."

# ---------- –ö–æ–º–∞–Ω–¥–∏ ----------
@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç, —è UnityPlan Bot –∑ AI!\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "‚Ä¢ /ask —Ç–≤–æ—î_–ø–∏—Ç–∞–Ω–Ω—è ‚Äî –∑–∞–ø–∏—Ç –¥–æ AI\n"
        "‚Ä¢ /addgoal –¢–µ–∫—Å—Ç —Ü—ñ–ª—ñ ‚Äî –¥–æ–¥–∞—Ç–∏\n"
        "‚Ä¢ /goals ‚Äî —Å–ø–∏—Å–æ–∫ —Ü—ñ–ª–µ–π\n"
        "‚Ä¢ /done ID ‚Äî –ø–æ–∑–Ω–∞—á–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–æ—é\n"
        "‚Ä¢ /del ID ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏\n",
        reply_markup=main_menu
    )

@dp.message(Command("ask"))
async def cmd_ask(message: Message, command: CommandObject):
    question = (command.args or "").strip()
    if not question:
        await message.answer("–ù–∞–ø–∏—à–∏ —Ç–∞–∫: `/ask –î–æ–ø–æ–º–æ–∂–∏ —Å–∫–ª–∞—Å—Ç–∏ –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å`", parse_mode="Markdown")
        return
    await message.answer("üß† –î—É–º–∞—é –Ω–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é‚Ä¶")
    answer = await ask_openai(question)
    await message.answer(answer)

@dp.message(Command("addgoal"))
async def cmd_addgoal(message: Message, command: CommandObject):
    text = (command.args or "").strip()
    if not text:
        await message.answer("–í–≤–µ–¥–∏ —Ç–∞–∫: `/addgoal –ö—É–ø–∏—Ç–∏ BMW S1000RR`", parse_mode="Markdown")
        return
    goal_id = await add_goal(message.from_user.id, text)
    await message.answer(f"‚úÖ –¶—ñ–ª—å –¥–æ–¥–∞–Ω–æ (ID: {goal_id})")

@dp.message(Command("goals"))
async def cmd_goals(message: Message):
    rows = await list_goals(message.from_user.id)
    if not rows:
        await message.answer("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Ü—ñ–ª–µ–π. –î–æ–¥–∞–π —á–µ—Ä–µ–∑ `/addgoal ...`", parse_mode="Markdown")
        return
    lines = []
    for _id, text, is_done in rows:
        status = "‚úÖ" if is_done else "‚è≥"
        lines.append(f"{status} *{_id}*. {text}")
    await message.answer("\n".join(lines), parse_mode="Markdown")

@dp.message(Command("done"))
async def cmd_done(message: Message, command: CommandObject):
    if not command.args or not command.args.isdigit():
        await message.answer("–í–≤–µ–¥–∏ —Ç–∞–∫: `/done 12` (–¥–µ 12 ‚Äî ID —Ü—ñ–ª—ñ)", parse_mode="Markdown")
        return
    changed = await mark_done(message.from_user.id, int(command.args))
    await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ!" if changed else "‚ùóÔ∏è–ù–µ –∑–Ω–∞–π—à–æ–≤ —Ç–∞–∫—É —Ü—ñ–ª—å.")

@dp.message(Command("del"))
async def cmd_del(message: Message, command: CommandObject):
    if not command.args or not command.args.isdigit():
        await message.answer("–í–≤–µ–¥–∏ —Ç–∞–∫: `/del 12` (–¥–µ 12 ‚Äî ID —Ü—ñ–ª—ñ)", parse_mode="Markdown")
        return
    deleted = await delete_goal(message.from_user.id, int(command.args))
    await message.answer("üóë –í–∏–¥–∞–ª–µ–Ω–æ." if deleted else "‚ùóÔ∏è–ù–µ –∑–Ω–∞–π—à–æ–≤ —Ç–∞–∫—É —Ü—ñ–ª—å.")

# ---------- –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –∑ –º–µ–Ω—é ----------
@dp.message()
async def handle_buttons(message: Message):
    if message.text == "üß† –ó–∞–ø–∏—Ç–∞—Ç–∏ AI":
        await message.answer("–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: `/ask –¢–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è`", parse_mode="Markdown")
    elif message.text == "üéØ –ú–æ—ó —Ü—ñ–ª—ñ":
        await cmd_goals(message)
    elif message.text == "üöÄ –ù–æ–≤–∏–π —á–µ–ª–µ–Ω–¥–∂":
        await message.answer("(–¢—É—Ç –ø—ñ–∑–Ω—ñ—à–µ –∑—Ä–æ–±–∏–º–æ –º–∞–π—Å—Ç–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–µ–ª–µ–Ω–¥–∂—É)")
    elif message.text == "üìÖ –ü–ª–∞–Ω –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ":
        await message.answer("(–¢—É—Ç –ø—ñ–∑–Ω—ñ—à–µ –ø—ñ–¥–∫–ª—é—á–∏–º–æ –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å)")
    else:
        await message.answer("–í–∏–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é üëá", reply_markup=main_menu)

# ---------- –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª ----------
async def main():
    await init_db()
    logging.info("üöÄ UnityPlan Bot + SQLite + OpenAI –∑–∞–ø—É—â–µ–Ω–æ!")
    await dp.start_polling(bot, allowed_updates=["message"])

if __name__ == "__main__":
    asyncio.run(main())
from openai import OpenAI

# —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

@dp.message(Command("ask"))
async def ask_ai(message: Message):
    query = message.text.replace("/ask", "").strip()
    if not query:
        await message.answer("‚ùì –ù–∞–ø–∏—à–∏ –∑–∞–ø–∏—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ: `/ask —Ç–≤–æ—î_–ø–∏—Ç–∞–Ω–Ω—è`")
        return

    await message.answer("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é...")

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢–∏ ‚Äî –∫–æ—Ä–∏—Å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç UnityPlan, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î –ª—é–¥—è–º –∑ —Ü—ñ–ª—è–º–∏, –ø–ª–∞–Ω–∞–º–∏ —ñ –º–æ—Ç–∏–≤–∞—Ü—ñ—î—é."},
                {"role": "user", "content": query},
            ],
        )
        answer = response.choices[0].message.content
        await message.answer(f"üß† –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI:\n{answer}")

    except Exception as e:
        await message.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ AI.")
        print(e)
